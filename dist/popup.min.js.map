{"version":3,"sources":["popup.js"],"names":["Popup","show","type","opt","time","popupType","indexOf","console","error","create","popupBox","getElementsByClassName","text","options","maskColor","popupMask","style","backgroundColor","textContent","close","popupItem","buttonReverse","buttons","float","yes","no","addEvent","success","confirm","timeout","failure","setTimeout","display","appendChild","document","createElement","classList","add","innerHTML","popupHTML","ele","onclick","def","isFunction","cb","Object","prototype","fn","toString","call","popupItems","clearTimeout","len","i","length","getElementById","warn","flag","create_popupBox","setAttribute","create_popupMask","loading","popupConfirm","log","e","stopPropagation","prevent","stop","addEventListener"],"mappings":"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","file":"popup.min.js","sourcesContent":["/**\r\n * Popup 1.2\r\n *\r\n * no-nothing @ github\r\n * Copyright 2017, MIT License\r\n *\r\n */\r\n\r\nfunction Popup() {\r\n    \"use strict\";\r\n\r\n    //判断DOM中是否存在id为\"popup-box\"的元素，没有的话创建\r\n    let flag = document.getElementById('popup-box') || document.getElementsByClassName('popup-box')[0];\r\n    if (flag) {\r\n        console.warn('请删除HTML中的\"#popup-box\"和\".popup-box\"元素,否则会出现意想不到的BUG');\r\n    } else {\r\n        let create_popupBox = document.createElement('div');\r\n        let create_popupMask = document.createElement('div');\r\n        create_popupBox.setAttribute('id', 'popup-box');\r\n        create_popupBox.classList.add('popup-box');\r\n        create_popupMask.classList.add('popup-mask');\r\n        create_popupBox.appendChild(create_popupMask);\r\n        document.getElementsByTagName('body')[0].appendChild(create_popupBox);\r\n    }\r\n\r\n    //HTML模板\r\n    const popupHTML = {\r\n        confirm: \"<div class=\\\"confirm-text\\\"><p class=\\\"text\\\"><\\/p><\\/div>\" +\r\n        \"<div class=\\\"confirm-button clear-fix\\\">\" +\r\n        \"    <button class=\\\"button no\\\">取消<\\/button>\" +\r\n        \"    <button class=\\\"button yes\\\">确定<\\/button>\" +\r\n        \"<\\/div>\",\r\n\r\n        loading: \"<span class=\\\"icon loading\\\"><\\/span>\" +\r\n        \"<p class=\\\"text\\\"><\\/p>\",\r\n\r\n        success: \"<span class=\\\"icon\\\"><\\/span>\" +\r\n        \"<p class=\\\"text\\\"><\\/p>\",\r\n\r\n        failure: \"<span class=\\\"icon\\\"><\\/span>\" +\r\n        \"<p class=\\\"text\\\"><\\/p>\"\r\n    };\r\n\r\n    let popupBox = document.getElementById('popup-box');\r\n    let popupMask = popupBox.getElementsByClassName('popup-mask')[0];\r\n    const popupType = ['confirm', 'loading', 'success', 'failure']; //目前支持的弹窗类型\r\n    let options = {\r\n        confirm: {\r\n            maskColor: 'rgba(67, 67, 67, 0.5)',\r\n            text: '解绑后将无法收到该设备的任何消息。您确定要解绑吗?',\r\n            buttonReverse: false,\r\n            success: function () {\r\n                let popupConfirm = popupBox.getElementsByClassName('popup-confirm')[0];\r\n                popupBox.style.display = 'none';\r\n                popupConfirm.style.display = 'none';\r\n                console.log('click success');\r\n            },\r\n            failure: function () {\r\n                let popupConfirm = popupBox.getElementsByClassName('popup-confirm')[0];\r\n                popupBox.style.display = 'none';\r\n                popupConfirm.style.display = 'none';\r\n                console.log('click failure');\r\n            }\r\n        },\r\n        loading: {\r\n            maskColor: 'transparent',\r\n            text: '解绑中...'\r\n        },\r\n        success: {\r\n            maskColor: 'transparent',\r\n            text: '该设备已解除绑定'\r\n        },\r\n        failure: {\r\n            maskColor: 'transparent',\r\n            text: '该设备解绑失败 请重试'\r\n        }\r\n    }; //弹窗样式配置\r\n\r\n    let time = null;\r\n\r\n    const prevent = function (e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const stop = function (e) {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    // 阻止用户滑动，防止弹窗内的按钮点透\r\n    popupBox.addEventListener('touchmove', prevent, false);\r\n    popupMask.addEventListener('touchstart', stop, false);\r\n    popupMask.addEventListener('touchend', stop, false);\r\n    popupMask.addEventListener('click', stop, false);\r\n\r\n    //展示指定的popupItem，传入参数 confirm:确认? loading:加载动画 success:成功 failure:失败\r\n    function show(type, opt) {\r\n        if (time !== null) {\r\n            clearTimeout(time);\r\n            time = null;\r\n        }\r\n        //若不支持报错，停止运行\r\n        if (popupType.indexOf(type) === -1) {\r\n            console.error('请输入合法的\"show(arg)\",arg可选\"confirm\" \"success\" \"failure\" \"loading\"');\r\n            return false;\r\n        }\r\n\r\n        //未传入opt的时候opt={}\r\n        opt = opt || {};\r\n\r\n        //若DOM无相应节点，创建\r\n        if (!popupBox.getElementsByClassName('popup-' + type)[0]) {\r\n            create(type);\r\n        }\r\n\r\n        //重置默认内容\r\n        if (opt.text) {\r\n            options[type].text = opt.text;\r\n        }\r\n        if (opt.maskColor) {\r\n            options[type].maskColor = opt.maskColor;\r\n        }\r\n\r\n        //配置样式和内容等\r\n        popupMask.style.backgroundColor = options[type].maskColor;\r\n        close();\r\n        let popupItem = popupBox.getElementsByClassName('popup-' + type)[0];\r\n        let text = popupItem.getElementsByClassName('text')[0];\r\n        text.textContent = options[type].text;\r\n\r\n        //confirm添加点击事件\r\n        if (type === 'confirm') {\r\n            if (opt.buttonReverse) {\r\n                options['confirm'].buttonReverse = opt.buttonReverse;\r\n            }\r\n            let buttons = popupItem.getElementsByClassName('button');\r\n            if (options['confirm'].buttonReverse) {\r\n                buttons[0].style.float = 'right';\r\n                buttons[1].style.float = 'left';\r\n            } else {\r\n                buttons[0].style.float = 'left';\r\n                buttons[1].style.float = 'right';\r\n            }\r\n\r\n            let yes = popupItem.getElementsByClassName('yes')[0];\r\n            let no = popupItem.getElementsByClassName('no')[0];\r\n            addEvent(yes, opt.success, options.confirm.success);\r\n            addEvent(no, opt.failure, options.confirm.failure);\r\n        }\r\n\r\n        //自动关闭\r\n        if (opt.timeout) {\r\n            time = setTimeout(function () {\r\n                close();\r\n            }, opt.timeout);\r\n        }\r\n\r\n        popupItem.style.display = 'block';\r\n        popupBox.style.display = 'block';\r\n    }\r\n\r\n    //生成HTML，type取 'confirm','loading','success','failure'\r\n    function create(type) {\r\n        let popupItem = document.createElement('div');\r\n        popupItem.classList.add('popup-item', 'popup-' + type);\r\n        popupItem.innerHTML = popupHTML[type];\r\n        popupBox.appendChild(popupItem);\r\n    }\r\n\r\n    //confirm弹窗添加回掉函数\r\n    function addEvent(ele, cb, def) {\r\n        isFunction(cb) ? ele.onclick = function () {\r\n                def();\r\n                cb();\r\n            } :\r\n            ele.onclick = def;\r\n    }\r\n\r\n    //判断是否为函数\r\n    function isFunction(fn) {\r\n        return Object.prototype.toString.call(fn) === '[object Function]';\r\n    }\r\n\r\n    /* 关闭所有弹窗 */\r\n    function close() {\r\n        if (time !== null) {\r\n            clearTimeout(time);\r\n            time = null;\r\n        }\r\n        let popupItems = popupBox.getElementsByClassName('popup-item'); //popupBox下的所有已使用的弹窗集合\r\n        popupBox.style.display = 'none';\r\n        for (let i = 0, len = popupItems.length; i < len; i++) {\r\n            popupItems[i].style.display = 'none';\r\n        }\r\n    }\r\n\r\n    //暴露API\r\n    return {\r\n        show: function (type, opt) {\r\n            show(type, opt);\r\n        },\r\n        close: function () {\r\n            close();\r\n        }\r\n    }\r\n}\r\n"]}